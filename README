Prueba de Javier Frez valdenegro.
Un dato antes de leer y ver todo. Le pido disculpas por el atraso de la pep, planeaba entregar un contenido similar a la hora correspondiente. pero gracias a un problema con VTR, la mayor parte de ayer y hoy (22 y 23 de agosto) estuve sin internet. Si hubiera podido trabajar en esas horas, hubiera entregado un trabajo similar a este (no voy a mentir), o talvez ligeramente mas avanzado.
Lamento mucho los inconvenientes, es el primer programa que hago donde tengo que conectarme con una base de datos (en los cursos anteriores siempre que empezaba a trabajar en el codigo, la conexion ya estaba hecha) y de verdad que debi de haber avanzado en esta pep desde antes.

Explicación de cómo funciona el programa.

- El archivo principal, el backend es "app.py", el programa entero funciona al ejecutar ese programa.
- Los archivos html se encuentran en la carpeta Templates. El archivo que tiene la entrada de los datos para la “petición” es el archivo de nombre "signup.html". Para llegar a esa pantalla desde la ventana de inicio, se tiene que hacer click en el enlace que tiene como nombre "Consigue tu permiso".
- La página elaborada (ventana de inicio) se encuentra en http://localhost:5000/
- Se utilizó la base de datos MySQL.



(Preguntas a responder: ¿La posee? ¿porque?)
Lista de características deseadas en un sistema distribuido:

-Transparencia: Esta característica habla de la capacidad del sistema de dar la impresión de que es todos los procesos y recursos son provistos por el mismo sistema, sin informar que estos están distribuidos en múltiples computadores (en el caso de los sistemas distribuidos). En el programa elaborado, esta característica se cumple, pero no por tener una distribución bien elaborada, sino porque todo el sistema funciona en un solo computador.
       - Acceso: El programa se presenta de igual manera en los distintos sistemas operativos. Pero no tiene variados tipos para guardar las peticiones realizadas.
       - Ubicación: La aplicación no informa al usuario donde es que se guarda la información de su petición. Y según las normas de transparencia, este accionar es lo correcto.
       - Migración: No existe movimiento de recursos en el sistema actual.
       - Re-localización: Como no existe el movimiento de recursos, no hay necesidad de un plan para que el programa siga funcionando aunque se estén migrando los recursos.
       - Replicación: El sistema no tiene necesidad de ocultar la replicación de información obtenida de parte del usuario, puesto que no realiza replicaciones.
       - Concurrencia: Existe concurrencia en el programa, puesto que se puede usar el servicio por parte de más de un usuario al mismo tiempo sin que estos se den cuenta de que hay otro usuario. Exactamente cuantos usuarios soporta el sistema es desconocido.
       - Falla: Esta subcategoría no se cumple, pues si el sistema llega a fallar, el usuario se dará cuenta.

- Apertura: Un sistema informático es abierto si el sistema puede ser extendido de diversas maneras. Ya sea en el hardware o en el software. En el caso de este sistema, es posible mejorarlo pero más por el hecho de que es relativamente sencilla la estructura del programa, que el hecho de que este hecho con las “extensiones” en mente.
       - Interoperabilidad: Los procesos del programa se comunican de manera directa, estando todos estos en la misma máquina. No tienen comunicación con computadores o sistemas externos.
       - Portabilidad: El sistema no está diseñado para la incorporación de extensiones, pero es lo suficientemente sencillo como para que de igual manera se puedan incorporar. Incluyendo la incorporación, valga la redundancia, de otros sistemas.
       - Fácil extensión: Como el sistema elaborado es tan básico, la incorporación de nuevos componentes es relativamente sencilla.

- Escalabilidad: Escalabilidad habla de lo preparado que está el sistema para recibir escalabilidad horizontal y vertical. Siendo el primero cuando se aumenta la cantidad de recursos en el sistema; Y el segundo cuando las capacidades de los recursos utilizados aumentan. En el caso de este sistema, no está preparado para la escalabilidad horizontal. Se podrían conseguir más computadores. Pero el programa escrito debe de ser modificado para poder enviar la información recibida entre estos sistemas. En el caso del escalamiento vertical, un mejor computador mejoraría el rendimiento del programa, sin la necesidad de modificar el código.
       - Particionamiento: El particionamiento del programa cuenta con archivos html para poder recibir la información, un backend elaborado por Python Flask y una base de datos MySQL. Gracias a este particionamiento, se pueden dividir estas funciones entre distintos computadores, pero como se dijo anteriormente, se debe de modificar el código.
       - Replicar: Este sistema no implementa replica, toda la información almacenada solo tiene una copia única.
       - Cache: No existe Cache en este sistema. Todavía no está implementada ninguna función que regrese información.

- Disponibilidad: La disponibilidad del sistema es baja, puesto que todo está elaborado en un solo computador, si este servicio se ve interrumpido, ningún usuario puede ingresar una petición.

- Tolerancia al error: Al igual que como se explicó en disponibilidad, si el servicio falla en el computador que soporta la aplicación, todo se cae. Pero el código si tiene funciones para prevenir algún "Crash" en el caso de detectarse un error.


############## Actualizacion para PEP02 #######################

Características de un sistema distribuido y solucion para las caracteristicas que no se cumplen:



‌Transparencia: Se cumple, gracias a que el sistema actualmente es, en efecto, un solo equipo trabajando, por lo uqe da esa impresion de transparencia.

	Acceso: Se cumple, parcialmente, pues se oculta las diferentes representaciones de datos en los diferentes O/S, pero se debe más al hecho de que todo se escribe y almacena con la misma nomesclaruta que es interpretable por todos los O/S.

	Ubicación: Se cumple.

	Migración: Se cumple. No existe función para mover los recursos, por lo que el usuario nunca se entera del movimiento de estos.

	Relocalización: Se cumple, pusto de que no existe movimiento de recursos, el usuario nunca notara que el recurso no esta disponible por relocalización.

	Replicación: Se cumple. El usuario nunca es informado de la replicacion de sus datos, puesto que estos nunca son replicados.

	Concurrencia: Se cumple.

	Falla: No se cumple, el sistema esta en solo un equipo, si este equipo cae, el programa cae con él. Solución: se puede crear un nodo maestro que dirija al usuario a un backend de respaldo cuando el backend normal sufre un fallo, proceso que no debería de porque notarse por parte del usuario. Ademas en cuanto a la base de datos, se puede hacer una replica, lo que serviría como respaldo en el caso de que la base de dato sufriera una falla.

	Persistencia. Se cumple.


‌Escalabilidad: No se cumple la escalabilidad horizontal, puesto que el sistema no esta desarrollado para soportarlos. Se cumple en el caso de escalabilidad vertical. Solución: Si las funcionalidades del código se pueden separar, como por decirlo así, tener más backends, seria posible separar estas en distintos computadores, lo que permitiría al programa ser apto para aceptar escalabilidad horizontal.

	Particionar: Puede ser particionado, pero no esta particionado en la actualidad. Aunque el particionamiento se puede mejorar gracias a las mejoras sugeridas anteriormente y al separar con mayor claridad el frontend del backend, como por el uso de una conexion API entre estos.

	Replicar: No se cumple. El sistema no realiza replicas. Solución: Aunque se escuche redundante, la solución a esta característica es la creación de replicas, ya sea tener distintas replicas del backend con el propósito de que cada una se encargue de una funcionalidad. Esto ayuda a no solo soportar las fallas en caso de que uno de estas replicas falle, sino que también puede aligerar la carga de uno de estos sistemas al implementar tecnología de nodo maestro (ya sea usando Kafka o Apache Storm) para manejar el flujo de datos entre todas las replicas.

	Cache: No se cumple. El sistema no posee ni se ve en la necesidad de implementar Cache, puesto de que no es capaz de recuperar datos. Ademas puesto que el usuario no suele entrar muchas veces seguidas para crear un permiso, gracias a la naturaleza del problema.


‌Disponibilidad: Es baja. Todo esta implementado en un computador, por lo que si este se cae, todo el programa se cae. Solución: El aplicar


‌Heterogeneidad del hardware: No se cumple, en gran parte puesto que todo esta distribuido en la misma maquina, y no hay una fuerte diferencia entre el frontend y el backend.


‌Disposición de recursos: No se cumple puesto que la aplicación esta en formato local, lo que imposibilita el acceso para cualquier usuario que no este en el computador que esta ejecutando el programa. Solución: Si el programa se ejecuta por medio de un servidor publico, existiria más acceso al recurso por parte de los usuarios.


‌Apertura: Se cumple, puesto que el codigo es tan sencillo que es relativamente facil el extender sus funcionalidades.

	Interoperabilidad: No se cumple, pero el programa no requiere la comunicación con otros computadores o sistemas externos.

	Portabilidad: Se cumple parcialmetne puesto que el codigo es muy sencillo, por lo que se puede incorporar en otros sistemas.

	Fácil extensión: Se cumple. Como el sistema elaborado es tan básico, la incorporación de nuevos componentes es relativamente sencilla.